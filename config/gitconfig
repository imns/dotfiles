#[diff]
#	external = git_diff_wrapper

[pager]
	diff =

[color]
	diff = auto
	status = auto
	branch = auto
	ui = auto

[user]
	name = Nate Smith
	email = something@something.com

[core]
	eol = lf

[merge]
	tool = opendiff

[alias]
    # lot of good ideas http://git.wiki.kernel.org/index.php/Aliases
    # some aliases lifted from https://github.com/SixArm/sixarm_git_gitconfig/blob/master/gitconfig.d/alias.txt

    # briefer status output
    st = status -sb
    stn = status -sb -uno
    # run 'git rm' on files already deleted outside of git
    rmdead = !git ls-files --deleted | xargs git rm

    ################### log

    # list new commits after a fetch
    lc = log ORIG_HEAD.. --stat --no-merges
    # brief, colorized listing with files that changed, in a pager
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # nicer log output
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    # http://pyrtsa.posterous.com/aligning-your-git-logs
    l50 = "!git log --abbrev-commit --date=short --pretty=format:'%x00%h%x00%cd%x00%s%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m %-50s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$4), $5, $6 }' | less -R"
    ll80 = "!git log --abbrev-commit --date=short --pretty=format:'%x00%h%x00%cd%x00%s%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m \\033[32m%s\\033[0m %-80s \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, $3, gensub(/(.{79}).{2,}/, \"\\\\1…\",\"g\",$4), $5, $6 }' | less -R"
    lg50 = "!git log --graph --color=always --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-50s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{49}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5, $6 }' | less -R"
    lg80 = "!git log --graph --color=always --abbrev-commit --date=relative --pretty=format:'%x00%h%x00%s%x00%cd%x00%an%x00%d' | gawk -F '\\0' '{ printf \"%s\\033[31m%s\\033[0m %-80s \\033[32m%14s\\033[0m \\033[30;1m%s\\033[0m\\033[33m%s\\n\", $1, $2, gensub(/(.{79}).{2,}/, \"\\\\1…\",\"g\",$3), $4, $5, $6 }' | less -R"
    loj = log  --abbrev-commit --decorate --graph --date=iso --pretty=format:'%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %ad %C(bold blue)<%an>%Creset'

    ################### diff
    diff-all = '!for name in $(git diff --name-only $1); do git difftool $1 $name & done'
    diff-changes = diff --name-status -r
    diff-stat = diff --stat -b -r
    diff-staged = diff --cached
    diff-branch = diff --name-status
    # useful at times that i have a more exotic default diff (vimdiff)
    rdiff = diff --no-ext-diff
    # highlight differing words instead of lines
    wdiff = diff --color-words

    ################### Undo aliases
    undo = git reset --hard
    undoclean = !git reset --hard && git clean -fd
    uncommit = git reset --soft HEAD^
    #uncommit = !git reset --soft HEAD^
    unadd = reset HEAD
    unstage = git reset HEAD

    ################# other

    # Find text in any commit ever
    grep-all = !"git rev-list --all | xargs git grep '$1'"

    # Sort by date for branches; can be useful for spring cleaning
    refs-by-date = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short)'

    files = !git log --pretty=format: --name-only --diff-filter=A | sort -
    type = cat-file -t
    dump = cat-file -p
    timeline = log --oneline --graph --decorate
    merge-branch = merge --no-ff

    #jj = !echo before $1 after | echo
    #permanentpurge = !git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch $1' --prune-empty --tag-name-filter cat -- --all | echo
    show-big-files = "!git rev-list --all --objects | sed -n $(git rev-list --objects --all | cut -f1 -d' ' | git cat-file --batch-check | grep blob | sort -n -k 3 | tail -n40 | while read hash type size; do echo -n \"-e s/$hash/$size/p \"; done) | sort -n -k1"


[push]
	default = matching

[text]
	eol = lf

[status]
#	showUntrackedFiles = true
	showDirtyState = true
	showStashState = true

[advice]
	statusHints = true
